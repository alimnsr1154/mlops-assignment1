name: CI/CD Pipeline

# Ensure the workflow has write permissions
permissions:
  contents: write

on:
  push:
    branches:
      - dev
      - stage
      - prod
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint Code (Flake8)
      run: |
        pip install flake8
        flake8 .

  push_to_stage:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/dev'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Configure Git with PAT
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git
        git config pull.rebase false  # Set merge strategy to merge
      
    
    - name: Push to Stage Branch
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        git fetch origin
        git checkout stage || git checkout -b stage
        git pull origin stage  # Pull changes from remote stage branch
        git merge dev --allow-unrelated-histories  # Merge dev into stage
        git push origin stage

  push_to_prod:
    runs-on: ubuntu-latest
    needs: push_to_stage
    if: github.ref == 'refs/heads/stage'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Configure Git with PAT
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}.git
        
    - name: Push to Prod Branch
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        git fetch
        git checkout prod || git checkout -b prod
        git merge origin/stage --allow-unrelated-histories || true
        git push origin prod

  deploy_prod:
    runs-on: ubuntu-latest
    needs: push_to_prod
    if: github.ref == 'refs/heads/prod'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Deploy to Vercel (Production)
      run: npx vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --env FLASK_ENV=production